var mongoose = require('mongoose');
var connections = require('../../../db_connections/dbConnections');
var dbConfName = 'db-avancer';

var inwardlistSchema = mongoose.Schema({
    warehouseId: {type: String, index: true}, // MongoId of the warehouse
    referenceFile: String, // Filename in case of MANUAL or INTERFACE import
    mode: String, // MANUAL -  done via UI, INTERFACE - done via interface
    date: String,
    hopperSequence: Number, //hopper sequence
    hopperPriority: Number, //hopper priority normal=2,High=1
    name: String, // Name of the picklist - This will be auto generated by server
    materialHandlingUnit: [], // Type of material handling unit for that picklist
    pickRate: Number, // Pickrate
    resourceAssigned: [{
            deviceId: String, // MongoId of the device via which the task to be completed
            lot: Number,
            capacityAssigned: Number,
            timeStarted: Number,
            startedBy: String,
            timeEnded: Number,
            endedBy: String,
            status: Number,
            timeCreated: Number,
            pickActiveTime:Number
        }], // MongoId of the resource who is going to complete the task
    listType: {type: String, default: 'OPEN'}, // FIXED - If it is set to be fixed
    mergedPickLists: [],
    pickSubLists: [],
    orderNumber: [],
    sequence: Number,
    subListTimeCount: { type: Number, default: 0 },
    status: { type: Number, default: 1 }, // 1 - Unassigned,5 - Withdrawn (Retrive),11 - Activated,21 - Assigned,25 - In progress,31 - Done,35 - Done - Skipped,41 - Backlog
    syncStatus: { type: Number, default: 1 }, // 1 - Created But not send to mobile, 2 - Created and sent to mobile, 3 - Has new update to send
    uniqueId: String, // Unique id for checking the update status of android device for receiving update (MQTT side)
    acknowledgement: String, // If android side uniqueId and this uniqueId matches then acknowledgement would be YES
    timeCreated: Number,
    createdBy: String, // MongoId of the person created the putlist
    modifiedBy: String, // MongoId of the person modified the putlist
    timeAssigned: Number, // Time the picklist assigned to resource
    assignedBy: String, // MongoId of the person completed the putlist
    timeStarted: Number, // Time picklist started
    startedBy: String,
    timeCompleted: Number, //
    completedBy: String, // MongoId of the person completed the putlist
    timeBacklogged: String, // If the activity not completed on that day then the time activity backloged
    backloggedBy: String, // MongoId of the user who will update status as backlog | SYSTEM if by system script 
    version: { type: String, default: "v1" }, // current version of modeling, to have track of integrational changes in client database row
    activeStatus: { type: Number, default: 1 } // Record active status (For server use only)
});

module.exports = connections[dbConfName].model("transactionalData-inwardList", inwardlistSchema, 'transactionalData-inwardLists'); // Object - Its modeling - Its collection name
var mongoose = require('mongoose');
var connections = require('../../../db_connections/dbConnections');
var dbConfName = 'db-avancer';

var stockCountListSchema = mongoose.Schema({
    warehouseId: String, // MongoId of the warehouse
    type: String, // ITEM/LOCATION ITEM - Itemwise (1 item multiple location(records)) || Locationwise (1 location multiple items(records))
    name: String, // Name of the stockCountList - This will be auto generated by server
    resourceAssigned: [{
        deviceId: String,
        capacityAssigned: String
    }], // MongoId of the resource who is going to complete the task
    listType: { type: String, default: 'OPEN' }, // FIXED - If it is set to be fixed
    status: { type: Number, default: 0 }, // 0 - Unassigned, 1 - Assigned/pending, 2 - In progress, 3 - Done, 4 - Done (Some item skipped), 5 - Backlog
    syncStatus: { type: Number, default: 1 }, // 1 - Created But not send to mobile, 2 - Created and sent to mobile, 3 - Has new update to send
    uniqueId: String, // Unique id for checking the update status of android device for receiving update (MQTT side)
    acknowledgement: String, // If android side uniqueId and this uniqueId matches then acknowledgement would be YES
    timeCreated: Number,
    createdBy: String, // MongoId of the person created the putlist
    timeAssigned: Number, // Time the picklist assigned to resource
    assignedBy: String, // MongoId of the person completed the putlist
    timeCompleted: Number,
    completedBy: String, // MongoId of the person completed the putlist
    timeBacklogged: String, // If the activity not completed on that day then the time activity backloged
    backloggedBy: String, // MongoId of the user who will update status as backlog | SYSTEM if by system script 
    version: { type: String, default: "v1" }, // current version of modeling, to have track of integrational changes in client database row
    activeStatus: { type: Number, default: 1 }
});

module.exports = connections[dbConfName].model("transactionalData-stockCountList", stockCountListSchema, 'transactionalData-stockCountLists'); // Object - Its modeling - Its collection name